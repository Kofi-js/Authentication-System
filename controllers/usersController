const User = require("../models/User");
const { validationResult } = require("express-validator");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");
const { decode } = require("jsonwebtoken");
require("dotenv").config();
const { SECRET, EMAIL, PASS } = process.env;

//  @route          POST api/auth/register
// @desc            Register user and get token
// @access          Public
exports.registerUser = async (req, res) => {
  // check for errors
  const errors = validationResult(req);
  if (!errors.isEmpty())
    return res.status(400).json({ errors: errors.array() });

  // destructure request body
  const { firstName, lastName, email, password } = req.body;

  try {
    // check if user exist
    let existingUser = await User.findOne({ email });

    if (existingUser)
      return res
        .status(400)
        .json({ statusCode: 400, message: "User already exists!" });

    // else ...
    // hash user password
    const salt = await bcrypt.genSalt(10);

    const hashedPassword = await bcrypt.hash(password, salt);
    // create new user
    const newUser = await User.create({
      firstName: firstName,
      lastName: lastName,
      email: email,
      password: hashedPassword,
    });

    jwt.sign(
      {
        id: newUser._id,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        email: newUser.email,
        userRole: newUser.userRole,
        isAdmin: newUser.isAdmin,
        isManager: newUser.isManager,
        isStaff: newUser.isStaff,
      },
      SECRET,
      {
        expiresIn: 60, //3600
      },
      (err, token) => {
        if (err) throw err;
        res.json({
          statusCode: 200,
          message: "user created successfully",
          user: {
            firstName: newUser.firstName,
            lastName: newUser.lastName,
            email: newUser.email,
            userRole: newUser.userRole,
            isAdmin: newUser.isAdmin,
            isManager: newUser.isManager,
            isStaff: newUser.isStaff,
          },
          token,
        });
      }
    );
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route     GET   api/auth
// @desc      Get logged in user
// @access    Private
exports.getLoggedInUser = async (req, res) => {
  try {
    // Get user from dbb
    const user = await User.findById(req.user.id).select("-password");

    // return user
    res.json({
      statusCode: 200,
      message: "user gotten successfully",
      user,
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route           POST api/auth/login
// @desc            Auth user(user, staff, managers, admin) and get token
// @access          Public
exports.loginUser = async (req, res) => {
  // check for errors
  const errors = validationResult(req);
  if (!errors.isEmpty())
    return res.status(400).json({ errors: errors.array() });

  // else
  // destructure request body
  const { email, password } = req.body;

  try {
    // Initialize user
    let user = await User.findOne({ email });

    if (!user)
      return res.status(400).json({
        statusCode: 400,
        message: "Invalid credentials",
      });

    //else...
    //Check password
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch)
      return res.status(400).json({
        statusCode: 400,
        message: "Invalid credentials",
      });

    // else
    // there's a match, send token, send payload and signed token

    const payload = {
      user: {
        id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        userRole: user.userRole,
        isAdmin: user.isAdmin,
        isManager: user.isManager,
        isStaff: user.isStaff,
      },
    };

    jwt.sign(
      payload,
      SECRET,
      {
        expiresIn: 3600,
      },
      (err, token) => {
        if (err) throw err;
        res.json({
          statusCode: 200,
          message: "user logged in successfully",
          user: {
            firstName: user.firstName,
            lastName: user.lastName,
            email: user.email,
            userRole: user.userRole,
            isAdmin: user.isAdmin,
            isManager: user.isManager,
            isStaff: user.isStaff,
          },
          token,
        });
      }
    );
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route     PUT   api/auth/logout
// @desc      logout user
// @access    Private
exports.logoutUser = async (req, res) => {
  // const authHeader = req.headers["Authorization"];
  let splittedHeader = req.header("Authorization").split(" ");
  if (splittedHeader[0] !== "Bearer")
    return res.status(401).json({
      statusCode: 401,
      message: "authorization format is Bearer <token>",
    });

  jwt.sign(splittedHeader[1], "", { expiresIn: 1 }, (logout, err) => {
    if (logout) {
      console.log(logout);
      res.send({ msg: "You have been Logged Out" });
    } else {
      res.send({ msg: "Error" });
    }
  });
};

// @route       PUT api/user/:user_id/update
// @desc        update a registered user
// @access      Private
exports.updateUser = (req, res) => {
  User.updateOne(
    {
      _id: req.params.user_id,
    },
    {
      $set: {
        userRole: req.body.userRole,
        isAdmin: req.body.isAdmin,
        isManager: req.body.isManager,
        isStaff: req.body.isStaff,
      },
    }
  ).then((data) => {
    res
      .status(201)
      .json({ statusCode: 201, message: "Role assigned successfully", data });
  });
};

// @route       DELETE api/user/:user_id/delete
// @desc        Delete a reqistered user
// @access      Private
exports.deleteUser = (req, res) => {
  User.deleteOne({
    _id: req.params.user_id,
  }).then(() => {
    res.status(200).json({
      statusCode: 200,
      message: "user deleted successfully",
    });
  });
};

// @route       GET api/user/:user_id
// @desc        Get a registered user
// @access      Private
exports.getUser = async (req, res) => {
  try {
    const user = await User.findOne({
      _id: req.params.user_id,
    }).select("-password");

    res
      .status(200)
      .json({ statusCode: 200, message: "user fetched successfully" });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route       GET api/users
// @desc        Get all registered users
// @access      Private
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.status(200).json({ users });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route           POST api/auth/recover-password
// @desc            Recover password
// @access          Public
exports.recoverPassword = async (req, res) => {
  // check for errors
  const errors = validationResult(req);
  if (!errors.isEmpty())
    return res.status(400).json({ errors: errors.array() });

  const { email } = req.body;
  try {
    const checkEmail = await User.findOne({ email });
    if (!checkEmail)
      return res.status(401).json({
        statusCode: 401,
        message: "invalid email",
      });

    const payload = {
      user: {
        id: checkEmail._id,
      },
    };

    const token = jwt.sign(payload, SECRET, {
      expiresIn: 3600,
    });

    const output = `
            <h4>Change Password</h4>
            <p>Kindly use the link below to change your password</p>
            <p><a href="http://localhost:3000/api/auth/change-password?token=${token}">click here</a></p>
        `;
    let transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: EMAIL,
        pass: PASS,
      },
    });

    let mailOptions = {
      from: "Dev Tester ðŸ‘» <devtestar101@gmail.com>",
      to: email,
      subject: "Password Recovery",
      html: output,
    };

    transporter.sendMail(mailOptions);
    res
      .status(200)
      .json({ statusCode: 200, message: "Recovery link sent successully" });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};

// @route           PUT api/auth/change-password
// @desc            User change password
// @access          Public
exports.changePassword = async (req, res) => {
  // check if request has token
  const token = req.query.token;
  if (!token)
    return res
      .status(401)
      .json({ statusCode: 401, message: "invalid request" });

  // check if user id is in token
  const decoded = jwt.verify(token, SECRET);
  const user_id = decoded.user.id;
  if (!user_id)
    return res
      .status(401)
      .json({ statusCode: 401, message: "invalid request" });

  try {
    const salt = await bcrypt.genSalt(10);
    const password = req.body.password;
    const hashPassword = await bcrypt.hash(password, salt);

    const updateUserPassword = await User.updateOne(
      {
        _id: user_id,
      },
      {
        $set: {
          password: hashPassword,
        },
      }
    );

    res.status(201).json({
      statusCode: 201,
      message: "Password updated successfully. Login with new credentials",
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
};
